use std::io::Write;

fn prompt(name:&str) -> String {
    let mut line = String::new();
    print!("{}", name);
    std::io::stdout().flush().unwrap();
    std::io::stdin().read_line(&mut line).expect("Error: Could not read a line");

    return line.trim().to_string()
}

// underscore supresses error
// const _DIGITS : [[&str; 11]; 7] = [
//     ["╭──────╮", "╭──────╮  ╷ ", "╭──────╮  ╥ ", "┌───┐", "╷   ╷", "┌───┐", "┌─── ", "┌───┐", "┌───┐", "┌───┐", "     ", ],
//     ["│┌─┐┌─┐│", "│┌─┐┌─┐│  │ ", "│┌─┐┌─┐│  ║ ", "    │", "│   │", "│    ", "│    ", "    │", "│   │", "│   │", "     ", ],
//     ["││*││*││", "││*││*││  │ ", "││*││*││  ║ ", "    │", "│   │", "│    ", "│    ", "    │", "│   │", "│   │", "  .  ", ],
//     ["│└─┘└─┘│", "│└─┘└─┘│ ─┼─", "│└─┘└─┘│ ╞╬╡", " ───┤", "└───┤", "└───┐", "├───┐", "    │", "├───┤", "└───┤", "     ", ],
//     ["│      │", "│      │──┘ ", "│  ~~  │──┘ ", "    │", "    │", "    │", "│   │", "    │", "│   │", "    │", "  .  ", ],
//     ["│      │", "│      │    ", "│      │    ", "    │", "    │", "    │", "│   │", "    │", "│   │", "    │", "     ", ],
//     ["│╱╲╱╲╱╲│", "│╱╲╱╲╱╲│    ", "│╱╲╱╲╱╲│    ", "└───┘", "    ╵", "└───┘", "└───┘", "    ╵", "└───┘", "└───┘", "     ", ],
// ];

// underscore supresses error
const _DIGITS : [[&str; 11]; 7] = [
    ["╭──────╮", "╭──────╮  ╷ ", "╭──────╮  ╥ ", "╭────────╮", " ╭╮ ╭╮╭╮ ", "┌───┐", "┌─── ", "┌───┐", "┌───┐", "┌───┐", "     ", ],
    ["│┌─┐┌─┐│", "│┌─┐┌─┐│  │ ", "│┌─┐┌─┐│  ║ ", "│ ╭╮  ╭╮ │", "╭╯╰─╯╰╯╰╮", "│    ", "│    ", "    │", "│   │", "│   │", "     ", ],
    ["││*││*││", "││+││+││  │ ", "││^││^││  ║ ", "│ ╰╯  ╰╯ │", "│ 0 _ 0 │", "│    ", "│    ", "    │", "│   │", "│   │", "  .  ", ],
    ["│└─┘└─┘│", "│└─┘└─┘│ ─┼─", "│└─┘└─┘│ ╞╬╡", "│        │", "╰──   ──╯", "└───┐", "├───┐", "    │", "├───┤", "└───┤", "     ", ],
    ["│      │", "│      │──┘ ", "│  ~~  │──┘ ", "│        │", "╚╡ U U ╞╝", "    │", "│   │", "    │", "│   │", "    │", "  .  ", ],
    ["│      │", "│      │    ", "│      │    ", "│        │", " │  _  │ ", "    │", "│   │", "    │", "│   │", "    │", "     ", ],
    ["│╱╲╱╲╱╲│", "│╱╲╱╲╱╲│    ", "│╱╲╱╲╱╲│    ", "╰────────╯", " ╰─╯ ╰─╯ ", "└───┘", "└───┘", "    ╵", "└───┘", "└───┘", "     ", ],
];


fn main() {
    print!("\x1b[?25l"); // Hide Cursor
    // print!("\x1b[7A"); // Move Cursor to the top
    
    loop {
        // print!("\x1b[3J"); // Erase Display use 2 or 3
        let chosen_sprites: String = prompt("choose sprite: ");
        
        for row in &_DIGITS {
            for c in chosen_sprites.chars() {
                let col = match c {
                    '0'..='9' => c as usize - '0' as usize,
                    ':' => 10,
                    _ => 10,
                }; // 0-9
                print!("{} ", row[col]);
            }
            println!(); // blank line
        }
        // Pause for 990ms
        // std::thread::sleep(std::time::Duration::from_millis(990));
       
    }
}
